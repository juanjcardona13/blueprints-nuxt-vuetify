type Query {
  readTask(where: FilterTaskInput!): TaskType
  searchTasks(
    where: FilterTaskInput
    orderBy: OrderByTaskInput
    paginationConfig: PaginationConfigInput
  ): TaskPaginatedType
  readUser(where: FilterUserInput!): UserType
  searchUsers(
    where: FilterUserInput
    orderBy: OrderByUserInput
    paginationConfig: PaginationConfigInput
  ): UserPaginatedType
  readGroup(where: FilterGroupInput!): GroupType
  searchGroups(
    where: FilterGroupInput
    orderBy: OrderByGroupInput
    paginationConfig: PaginationConfigInput
  ): GroupPaginatedType
  readPermission(where: FilterPermissionInput!): PermissionType
  searchPermissions(
    where: FilterPermissionInput
    orderBy: OrderByPermissionInput
    paginationConfig: PaginationConfigInput
  ): PermissionPaginatedType
}

type TaskType {
  id: ID
  title: String!
  completed: Boolean
  created: DateTime
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input FilterTaskInput {
  id: IDFilter
  title: StringFilter
  completed: BooleanFilter
  created: DateTimeFilter
  AND: [FilterTaskInput]
  OR: [FilterTaskInput]
  NOT: FilterTaskInput
}

input IDFilter {
  exact: ID
  iexact: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  in: [ID]
  contains: ID
  icontains: ID
  startswith: ID
  istartswith: ID
  endswith: ID
  iendswith: ID
  range: [ID]
  isnull: Boolean
  regex: String
  iregex: String
}

input StringFilter {
  exact: String
  iexact: String
  gt: String
  gte: String
  lt: String
  lte: String
  in: [String]
  contains: String
  icontains: String
  startswith: String
  istartswith: String
  endswith: String
  iendswith: String
  range: [String]
  isnull: Boolean
  regex: String
  iregex: String
}

input BooleanFilter {
  exact: Boolean
  iexact: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  in: [Boolean]
  contains: Boolean
  icontains: Boolean
  startswith: Boolean
  istartswith: Boolean
  endswith: Boolean
  iendswith: Boolean
  range: [Boolean]
  isnull: Boolean
  regex: String
  iregex: String
}

input DateTimeFilter {
  exact: DateTime
  iexact: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime]
  contains: DateTime
  icontains: DateTime
  startswith: DateTime
  istartswith: DateTime
  endswith: DateTime
  iendswith: DateTime
  range: [DateTime]
  isnull: Boolean
  regex: String
  iregex: String
  year: DateTime
  month: DateTime
  day: DateTime
  weekDay: DateTime
  isoWeekDay: DateTime
  week: DateTime
  isoYear: DateTime
  quarter: DateTime
  hour: DateTime
  minute: DateTime
  second: DateTime
  date: DateTime
  time: DateTime
}

type TaskPaginatedType implements PaginationInterface {
  objects: [TaskType]
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStart: Int
  indexEnd: Int
}

"""
Defines a GraphQL Interface for pagination-related attributes.
"""
interface PaginationInterface {
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStart: Int
  indexEnd: Int
}

input OrderByTaskInput {
  id: OrderEnum
  title: OrderStringEnum
  completed: OrderEnum
  created: OrderEnum
}

enum OrderEnum {
  ASC
  DESC
}

enum OrderStringEnum {
  ASC
  DESC
  IASC
  IDESC
}

input PaginationConfigInput {
  page: Int = 1
  itemsPerPage: IntOrAll = "All"
}

"""
The page size can be int or 'All'
"""
scalar IntOrAll

type UserType {
  id: ID
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
  firstName: String
  lastName: String
  email: Email

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean
  dateJoined: DateTime

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  paginatedGroups(
    where: FilterGroupInput
    orderBy: OrderByGroupInput
    paginationConfig: PaginationConfigInput
  ): GroupPaginatedType

  """
  Specific permissions for this user.
  """
  paginatedUserPermissions(
    where: FilterPermissionInput
    orderBy: OrderByPermissionInput
    paginationConfig: PaginationConfigInput
  ): PermissionPaginatedType
}

"""
A field whose value conforms to the standard
internet email address format as specified in
HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar Email

type GroupPaginatedType implements PaginationInterface {
  objects: [GroupType]
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStart: Int
  indexEnd: Int
}

type GroupType {
  id: ID
  name: String!
  paginatedPermissions(
    where: FilterPermissionInput
    orderBy: OrderByPermissionInput
    paginationConfig: PaginationConfigInput
  ): PermissionPaginatedType

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  paginatedUser(
    where: FilterUserInput
    orderBy: OrderByUserInput
    paginationConfig: PaginationConfigInput
  ): UserPaginatedType
}

type PermissionPaginatedType implements PaginationInterface {
  objects: [PermissionType]
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStart: Int
  indexEnd: Int
}

type PermissionType {
  id: ID
  name: String!
  codename: String!
  paginatedGroup(
    where: FilterGroupInput
    orderBy: OrderByGroupInput
    paginationConfig: PaginationConfigInput
  ): GroupPaginatedType

  """
  Specific permissions for this user.
  """
  paginatedUser(
    where: FilterUserInput
    orderBy: OrderByUserInput
    paginationConfig: PaginationConfigInput
  ): UserPaginatedType
}

input FilterGroupInput {
  id: IDFilter
  name: StringFilter
  permissions: FilterPermissionInput
  user: FilterUserInput
  AND: [FilterGroupInput]
  OR: [FilterGroupInput]
  NOT: FilterGroupInput
}

input FilterPermissionInput {
  id: IDFilter
  name: StringFilter
  codename: StringFilter
  group: FilterGroupInput
  user: FilterUserInput
  AND: [FilterPermissionInput]
  OR: [FilterPermissionInput]
  NOT: FilterPermissionInput
}

input FilterUserInput {
  id: IDFilter
  password: StringFilter
  lastLogin: DateTimeFilter
  isSuperuser: BooleanFilter
  username: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: EmailFilter
  isStaff: BooleanFilter
  isActive: BooleanFilter
  dateJoined: DateTimeFilter
  groups: FilterGroupInput
  userPermissions: FilterPermissionInput
  AND: [FilterUserInput]
  OR: [FilterUserInput]
  NOT: FilterUserInput
}

input EmailFilter {
  exact: Email
  iexact: Email
  gt: Email
  gte: Email
  lt: Email
  lte: Email
  in: [Email]
  contains: Email
  icontains: Email
  startswith: Email
  istartswith: Email
  endswith: Email
  iendswith: Email
  range: [Email]
  isnull: Boolean
  regex: String
  iregex: String
}

input OrderByGroupInput {
  id: OrderEnum
  name: OrderStringEnum
}

type UserPaginatedType implements PaginationInterface {
  objects: [UserType]
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStart: Int
  indexEnd: Int
}

input OrderByUserInput {
  id: OrderEnum
  password: OrderStringEnum
  lastLogin: OrderEnum
  isSuperuser: OrderEnum
  username: OrderStringEnum
  firstName: OrderStringEnum
  lastName: OrderStringEnum
  email: OrderStringEnum
  isStaff: OrderEnum
  isActive: OrderEnum
  dateJoined: OrderEnum
}

input OrderByPermissionInput {
  id: OrderEnum
  name: OrderStringEnum
  codename: OrderStringEnum
}

type Mutation {
  createTasks(input: [CreateTaskInput!]!): CreateTasksPayload
  updateTasks(input: [UpdateTaskInput!]!): UpdateTasksPayload
  deleteTasks(where: FilterTaskInput!): DeleteTasksPayload
  deactivateTasks(where: FilterTaskInput!): DeactivateTasksPayload
  activateTasks(where: FilterTaskInput!): ActivateTasksPayload
  createUsers(input: [CreateUserInput!]!): CreateUsersPayload
  updateUsers(input: [UpdateUserInput!]!): UpdateUsersPayload
  deleteUsers(where: FilterUserInput!): DeleteUsersPayload
  deactivateUsers(where: FilterUserInput!): DeactivateUsersPayload
  activateUsers(where: FilterUserInput!): ActivateUsersPayload
  createGroups(input: [CreateGroupInput!]!): CreateGroupsPayload
  updateGroups(input: [UpdateGroupInput!]!): UpdateGroupsPayload
  deleteGroups(where: FilterGroupInput!): DeleteGroupsPayload
  deactivateGroups(where: FilterGroupInput!): DeactivateGroupsPayload
  activateGroups(where: FilterGroupInput!): ActivateGroupsPayload
  createPermissions(input: [CreatePermissionInput!]!): CreatePermissionsPayload
  updatePermissions(input: [UpdatePermissionInput!]!): UpdatePermissionsPayload
  deletePermissions(where: FilterPermissionInput!): DeletePermissionsPayload
  deactivatePermissions(
    where: FilterPermissionInput!
  ): DeactivatePermissionsPayload
  activatePermissions(where: FilterPermissionInput!): ActivatePermissionsPayload
}

type CreateTasksPayload {
  objects: [TaskType]
  errorsReport: [ErrorCollectionType]
}

"""
Represents a collection of errors associated with an object.

Attributes:
    object_position (str): The position of the object.
    errors (List[ErrorType]): A list of ErrorType objects representing the errors.

Methods:
    from_errors(cls, object_position, errors): Creates an instance of ErrorCollectionType from the given object position and errors.
"""
type ErrorCollectionType {
  objectPosition: String
  errors: [ErrorType]
}

"""
Represents an error type with a field and a list of error messages.
"""
type ErrorType {
  field: String!
  messages: [String!]!
}

input CreateTaskInput {
  title: String!
  completed: Boolean = false
}

type UpdateTasksPayload {
  objects: [TaskType]
  errorsReport: [ErrorCollectionType]
}

input UpdateTaskInput {
  id: ID!
  title: String
  completed: Boolean
}

type DeleteTasksPayload {
  objects: [TaskType]
  errorsReport: [ErrorCollectionType]
  success: Boolean
}

type DeactivateTasksPayload {
  objects: [TaskType]
  errorsReport: [ErrorCollectionType]
}

type ActivateTasksPayload {
  objects: [TaskType]
  errorsReport: [ErrorCollectionType]
}

type CreateUsersPayload {
  objects: [UserType]
  errorsReport: [ErrorCollectionType]
}

input CreateUserInput {
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean = false

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!
  firstName: String
  lastName: String
  email: Email

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean = false

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean = true
  dateJoined: DateTime

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  groups: [ID]

  """
  Specific permissions for this user.
  """
  userPermissions: [ID]
}

type UpdateUsersPayload {
  objects: [UserType]
  errorsReport: [ErrorCollectionType]
}

input UpdateUserInput {
  id: ID!
  password: String
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String
  firstName: String
  lastName: String
  email: Email

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean
  dateJoined: DateTime

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  groups: [ID]

  """
  Specific permissions for this user.
  """
  userPermissions: [ID]
}

type DeleteUsersPayload {
  objects: [UserType]
  errorsReport: [ErrorCollectionType]
  success: Boolean
}

type DeactivateUsersPayload {
  objects: [UserType]
  errorsReport: [ErrorCollectionType]
}

type ActivateUsersPayload {
  objects: [UserType]
  errorsReport: [ErrorCollectionType]
}

type CreateGroupsPayload {
  objects: [GroupType]
  errorsReport: [ErrorCollectionType]
}

input CreateGroupInput {
  name: String!
  permissions: [ID]
}

type UpdateGroupsPayload {
  objects: [GroupType]
  errorsReport: [ErrorCollectionType]
}

input UpdateGroupInput {
  id: ID!
  name: String
  permissions: [ID]
}

type DeleteGroupsPayload {
  objects: [GroupType]
  errorsReport: [ErrorCollectionType]
  success: Boolean
}

type DeactivateGroupsPayload {
  objects: [GroupType]
  errorsReport: [ErrorCollectionType]
}

type ActivateGroupsPayload {
  objects: [GroupType]
  errorsReport: [ErrorCollectionType]
}

type CreatePermissionsPayload {
  objects: [PermissionType]
  errorsReport: [ErrorCollectionType]
}

input CreatePermissionInput {
  name: String!
  contentType: ID!
  codename: String!
}

type UpdatePermissionsPayload {
  objects: [PermissionType]
  errorsReport: [ErrorCollectionType]
}

input UpdatePermissionInput {
  id: ID!
  name: String
  contentType: ID
  codename: String
}

type DeletePermissionsPayload {
  objects: [PermissionType]
  errorsReport: [ErrorCollectionType]
  success: Boolean
}

type DeactivatePermissionsPayload {
  objects: [PermissionType]
  errorsReport: [ErrorCollectionType]
}

type ActivatePermissionsPayload {
  objects: [PermissionType]
  errorsReport: [ErrorCollectionType]
}
